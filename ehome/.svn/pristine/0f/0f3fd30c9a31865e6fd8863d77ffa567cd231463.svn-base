/**
 * @Project:ZGHome
 * @FileName:AppTopic.java
 */
package com.ehome.cloud.app.guangchang;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ehome.cloud.guangchang.model.TopicModel;
import com.ehome.cloud.guangchang.service.ITopicService;
import com.ehome.cloud.sys.model.AppUserModel;
import com.ehome.cloud.sys.service.IAppUserService;
import com.ehome.core.dict.ResponseCode;
import com.ehome.core.frame.BaseController;
import com.ehome.core.util.PageData;
import com.ehome.core.util.SerializeUtils;
import com.ehome.core.util.StringUtil;
import com.ehome.core.util.TokenUtil;
import com.ehome.core.util.redis.JedisUtils;

/**
 * 广场话题客户端处理
 *
 * @Title:AppTopic
 * @Description:TODO
 * @author:张宗奎
 * @date:2017年2月13日
 * @version:
 */
@Controller
@RequestMapping(value = "/app/guangchang/topic")
public class AppTopic extends BaseController {
	/**
	 * 话题app传来的userId对应appuserId！！！！ 话题app传来的userId对应appuserId！！！！
	 * userId用作后台添加话题时存后台账号id
	 */

	@Resource
	private ITopicService iTopicService;
	@Resource
	private IAppUserService iAppUserService;

	/**
	 * 添加话题
	 *
	 */
	@ResponseBody
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public Map<String, Object> add(){
		logger.info("添加话题");
		PageData pd = this.getPageData();
		Map<String, Object> map = new HashMap<String, Object>();
		if(!TokenUtil.validateToken("", Long.parseLong(pd.getString("time").trim()), pd.getString("apptype").trim(), pd.getString("token").trim())){
			map.put("status", ResponseCode.invalidtoken.getCode());
			map.put("message", ResponseCode.invalidtoken.getMsg());
			return map;
		}

		TopicModel topicModel = new TopicModel();
		topicModel.setAppUserId(Integer.parseInt(pd.getString("userId").trim()));
		topicModel.setTitle(pd.getString("title"));
		topicModel.setDescription(pd.getString("description"));
		topicModel.setIsofficial(StringUtil.String2Int(pd.getString("isofficial").trim(), 0));
		topicModel.setSubtitle(pd.getString("subtitle"));
		topicModel.setTopicrule(pd.getString("topicrule"));
		topicModel.setPictureUrl(pd.getString("pictureUrl").trim());
		topicModel.setOrdernum(50);
		topicModel.setCreatetime(new Date());
		topicModel.setStatus(1);
		topicModel.setDiscussnum(0);

		try {
			iTopicService.save(topicModel);
			map.put("status", ResponseCode.success.getCode());
			map.put("message", "success");
			map.put("id", topicModel.getId());
		} catch (Exception e) {
			map.put("status", ResponseCode.error.getCode());
			map.put("message", "error");
			e.printStackTrace();
		}

		return map;

	}

	/**
	 * 获取一条话题详情
	 *
	 */
	@ResponseBody
	@RequestMapping(value = "/get", method = RequestMethod.POST)
	public Map<String, Object> get() {
		logger.info("获取一条话题详情");

		PageData pd = this.getPageData();
		Map<String, Object> map = new HashMap<String, Object>();
		if(!TokenUtil.validateToken("", Long.parseLong(pd.getString("time").trim()), pd.getString("apptype").trim(), pd.getString("token").trim())){
			map.put("status", ResponseCode.invalidtoken.getCode());
			map.put("message", ResponseCode.invalidtoken.getMsg());
			return map;
		}

		PageData conditionPd = new PageData();
		if (!pd.getString("topicId").trim().equals("")) {
			int topicId = Integer.parseInt(pd.getString("topicId").trim());
			conditionPd.put("topicId", topicId);
		}
		conditionPd.put("start", 1);
		conditionPd.put("limit", 5);

		List<PageData> topicList = null;
		try {
			topicList = iTopicService.selectForList(conditionPd);

			int id = 0;
			AppUserModel user = null;
			for(PageData tp:topicList){
				id = tp.getInteger("userId");
				if (JedisUtils.get(("login:user:login:id:"+id).getBytes()) == null){
					user = iAppUserService.selectByKey(id);
					if(user == null){
						tp.put("userName", null);
						tp.put("avatar", null);
					}else{
						tp.put("userName", user.getNickName());
						tp.put("avatar", user.getPortrait());
						JedisUtils.set(("login:user:login:id:"+id).getBytes(), SerializeUtils.serialize(user), 604800);
					}
				}else{

					user = (AppUserModel) SerializeUtils.deserialize(JedisUtils.get(("login:user:login:id:"+id).getBytes()));
					if(user == null){
						tp.put("userName", null);
						tp.put("avatar", null);
						JedisUtils.unLock("login:user:login:id:"+id);
					}else{
						tp.put("userName", user.getNickName());
						tp.put("avatar", user.getPortrait());
					}
				}
			}

			map.put("status", ResponseCode.success.getCode());
			map.put("message", "success");
			map.put("datas", topicList);
		} catch (Exception e) {
			map.put("status", ResponseCode.error.getCode());
			map.put("message", "error");
			e.printStackTrace();
		}

		return map;
	}

	/**
	 * 获取话题列表
	 *
	 */
	@ResponseBody
	@RequestMapping(value = "/getList", method = RequestMethod.POST)
	public Map<String, Object> getList() {
		PageData pd = this.getPageData();
		Map<String, Object> map = new HashMap<String, Object>();
		if(!TokenUtil.validateToken("", Long.parseLong(pd.getString("time").trim()), pd.getString("apptype").trim(), pd.getString("token").trim())){
			map.put("status", ResponseCode.invalidtoken.getCode());
			map.put("message", ResponseCode.invalidtoken.getMsg());
			return map;
		}

		PageData conditionPd = new PageData();
		String sortType = pd.getString("sortType");
		int start = StringUtil.String2Int(pd.getString("start"), 1);
		int limit = StringUtil.String2Int(pd.getString("limit"), 5);
		if (!pd.getString("userId").equals("")) {
			int userId = Integer.parseInt(pd.getString("userId").trim());
			conditionPd.put("userId", userId);
		}
		conditionPd.put("start", start);
		conditionPd.put("limit", limit);

		List<PageData> topicList = new ArrayList<PageData>();
		try {
			if (sortType.equals("1")) {// 时间降序
				topicList = iTopicService.selectForList(conditionPd);
			} else if (sortType.equals("2")) {// 距离
				// TODO
			}

			int id = 0;
			AppUserModel user = null;
			for(PageData tp:topicList){
				id = tp.getInteger("userId");
				if (JedisUtils.get(("login:user:login:id:"+id).getBytes()) == null){
					user = iAppUserService.selectByKey(id);
					if(user == null){
						tp.put("userName", null);
						tp.put("avatar", null);
					}else{
						tp.put("userName", user.getNickName());
						tp.put("avatar", user.getPortrait());
						JedisUtils.set(("login:user:login:id:"+id).getBytes(), SerializeUtils.serialize(user), 604800);
					}
				}else{

					user = (AppUserModel) SerializeUtils.deserialize(JedisUtils.get(("login:user:login:id:"+id).getBytes()));
					if(user == null){
						tp.put("userName", null);
						tp.put("avatar", null);
						JedisUtils.unLock("login:user:login:id:"+id);
					}else{
						tp.put("userName", user.getNickName());
						tp.put("avatar", user.getPortrait());
					}
				}
			}

			map.put("status", ResponseCode.success.getCode());
			map.put("message", "success");
			map.put("datas", topicList);
		} catch (Exception e) {
			map.put("status", ResponseCode.error.getCode());
			map.put("message", "error");
			e.printStackTrace();
		}

		return map;
	}

	/**
	 * 获取个人话题和讨论列表
	 *
	 */
	@ResponseBody
	@RequestMapping(value = "/getTopicAndDiscussionList", method = RequestMethod.POST)
	public Map<String, Object> getTopicAndDiscussionList() {
		PageData pd = this.getPageData();
		Map<String, Object> map = new HashMap<String, Object>();
		if(!TokenUtil.validateToken("", Long.parseLong(pd.getString("time").trim()), pd.getString("apptype").trim(), pd.getString("token").trim())){
			map.put("status", ResponseCode.invalidtoken.getCode());
			map.put("message", ResponseCode.invalidtoken.getMsg());
			return map;
		}

		PageData conditionPd = new PageData();
		int start = StringUtil.String2Int(pd.getString("start"), 1);
		int limit = StringUtil.String2Int(pd.getString("limit"), 5);
		if (!pd.getString("userId").trim().equals("")) {
			int userId = Integer.parseInt(pd.getString("userId").trim());
			conditionPd.put("userId", userId);
		}
		conditionPd.put("start", start);
		conditionPd.put("limit", limit);

		List<PageData> topicList = null;
		try {
			topicList = iTopicService.selectTopicAndDiscussionList(conditionPd);

			map.put("status", ResponseCode.success.getCode());
			map.put("message", "success");
			map.put("datas", topicList);
		} catch (Exception e) {
			map.put("status", ResponseCode.error.getCode());
			map.put("message", "error");
			e.printStackTrace();
		}

		return map;
	}

}
