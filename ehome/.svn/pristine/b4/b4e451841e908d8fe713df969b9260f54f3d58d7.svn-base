package com.ehome.push;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cloopen.rest.sdk.CCPRestSmsSDK;
import com.ehome.core.dict.ResponseCode;
import com.ehome.core.util.MapUtils;
import com.ehome.core.util.SpringPropertiesUtil;
import com.ehome.core.util.StringUtils;

/*
  * 短信、个推统一入口
 * @Title:PushEntrance
 * @Description:TODO
 * @author:zsh
 * @date:2017年4月6日
 * @version 1.0,2017年4月6日
 *
  */
public class PushUtil {

	private final static Logger logger = LoggerFactory
			.getLogger(PushUtil.class);

	private static String defaultValue = "";

	/**
	 * 当前时间
	  * @return
	  *
	 */
	//DateFormats 非线性安全
	public static String getTime() {
		return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
	}

	/**
	 *  初始化要推送的业务内容
	  * @param map
	  * @return
	  *
	 */

	@Deprecated
	public static String initPushContent(Map<String, Object> map) {
		JSONObject obj = new JSONObject();
		obj.put("type", map.get("returnType"));// 0表示系统消息 1表示通讯录 2表示圈子、3通知
		obj.put("subject", map.get("subject"));// type下的具体操作项：新增、修改、删除
		obj.put("data", map.get("data"));
		return obj.toString();
	}

	/**
	 *
	  * @param type值：1 只推送短信 3 只推送个推  5推送短信和个推
	  * @param map  发送信息载体  注意：推送个推时 content这个key的值，是客户端接收的内容，需要根据业务不同 ，与客户端约定传递的内容的数据格式
	  *
	 */
	public static String push(int type, Map<String, Object> map) {
		String returnStr = "";
		try {
			switch (type) {
			case 1://发送短信
				logger.info("发送短信");
				returnStr = sendSMS(createCCPRestSmsSDK(), map);
				break;
			case 2://个推(通知栏)
				logger.info("个推(通知栏)");
				returnStr = sendGeiTui(type, map);
				break;
			case 3://个推(透传)
				logger.info("个推(透传)");
				returnStr = sendGeiTui(type, map);
				break;
			case 4://短信和个推(通知)
				logger.info("短信和个推(通知)");
				returnStr = sendSMS(createCCPRestSmsSDK(), map);
				returnStr = sendGeiTui(type, map);
				break;
			case 5://短信和个推(透传)
				logger.info("短信和个推(透传)");
				returnStr = sendSMS(createCCPRestSmsSDK(), map);
				returnStr = sendGeiTui(type, map);
				break;
			default:
				//System.out.println("type参数不匹配");
				logger.info("type参数不匹配");
				break;
			}
		} catch (Exception e) {
			logger.info("returnStr="
					+ "{\"status\":\"+ResponseCode.error.getCode()+\"}");
			return "{\"status\":\"+ResponseCode.error.getCode()+\"}";
		}
		logger.info("returnStr=" + returnStr);
		return returnStr;
	}

	//创建短信平台对象
	public static CCPRestSmsSDK createCCPRestSmsSDK() {
		CCPRestSmsSDK ccpRestSmsSDK = null;
		if (ccpRestSmsSDK == null) {
			synchronized (PushUtil.class) {
				if (ccpRestSmsSDK == null) {
					ccpRestSmsSDK = new CCPRestSmsSDK();
					ccpRestSmsSDK.init(Constants.SERVERIP_SMS,
							Constants.SERVERPORT_SMS);
					ccpRestSmsSDK.setAccount(Constants.ACCOUNTSID_SMS,
							Constants.ACCOUNTTOKEN_SMS);
					ccpRestSmsSDK.setAppId(Constants.APPID_SMS);
				}
			}
		}
		return ccpRestSmsSDK;
	}

	/**
	 * 发送个推
	  * @param map
	  * @return
	  *
	 */
	public static String sendGeiTui(int type, Map<String, Object> map) {
		String returnStr = "";
		//		String returnStrTemp = "";
		String scene = StringUtils.obj2String(
				SpringPropertiesUtil.get("scene"), null);
		if (scene != null && !"".equals(scene) && Integer.parseInt(scene) == 1) {//省总
			if (type == 2 || type == 4) {
				returnStr = GetuiUtil.pushNotification(map);
			} else {
				returnStr = GetuiUtil.pushTranstransparentToIOS(map);
			}
		} else if (scene != null && !"".equals(scene)
				&& Integer.parseInt(scene) == 2) {//湛江
			if (type == 2 || type == 4) {
				returnStr = GetuiUtilForZJ.pushNotification(map);
			} else {
				returnStr = GetuiUtilForZJ.pushTranstransparentToIOS(map);
			}
		} else {
			returnStr = "没有配置scene现场参数 1省总 2 湛江";
			if (type == 2 || type == 4) {
				GetuiUtilForZJ.pushNotification(map);
				GetuiUtil.pushNotification(map);
			} else {
				GetuiUtilForZJ.pushTranstransparentToIOS(map);
				GetuiUtil.pushTranstransparentToIOS(map);
			}
		}
		return returnStr;
	}

	//短信信息
	@Deprecated
	public static Map<String, Object> createSmsInfo(Map<String, Object> map) {
		String smsTemplateId = MapUtils.getString(map, "smsTemplateId",
				defaultValue);
		String[] datas = (String[]) map.get("datas");
		String mobile = MapUtils.getString(map, "mobile", defaultValue);//多个手机号逗号隔开
		map.put("smsTemplateId", smsTemplateId);
		map.put("datas", datas);
		map.put("mobile", mobile);
		return map;
	}

	//发送短信
	@Deprecated
	public static Boolean sendTemplateSMS(CCPRestSmsSDK ccpRestSmsSDK,
			Map<String, Object> map) {
		String smsTemplateId = MapUtils.getString(map, "smsTemplateId",
				defaultValue);//短信模版id
		String[] datas = (String[]) map.get("datas");//注入短信参数
		String mobile = MapUtils.getString(map, "mobile", defaultValue);//多个手机号逗号隔开
		HashMap<String, Object> result = createCCPRestSmsSDK().sendTemplateSMS(
				mobile, smsTemplateId, datas);
		return "000000".equals(result.get("statusCode"));
	}

	/**
	 * 发送短信
	  * @param ccpRestSmsSDK
	  * @param map
	  * @return
	  *
	 */
	public static String sendSMS(CCPRestSmsSDK ccpRestSmsSDK,
			Map<String, Object> map) {
		String smsTemplateId = MapUtils.getString(map, "smsTemplateId",
				defaultValue);
		String[] datas = (String[]) map.get("datas");
		String mobile = MapUtils.getString(map, "mobile", defaultValue);//多个手机号逗号隔开
		Map<String, Object> result = ccpRestSmsSDK.sendTemplateSMS(mobile,
				smsTemplateId, datas);
		if ("000000".equals(result.get("statusCode"))) {
			//System.out.println("成功码=" + result.get("statusCode") +" 成功信息= "+result.get("statusMsg"));
			logger.info("成功码=" + result.get("statusCode") + " 成功信息= "
					+ result.get("statusMsg"));
			result.put("status", ResponseCode.success.getCode());
		} else {
			result.put("status", ResponseCode.error.getCode());
			//System.out.println("错误码=" + result.get("statusCode") +" 错误信息= "+result.get("statusMsg"));
			logger.info("错误码=" + result.get("statusCode") + " 错误信息= "
					+ result.get("statusMsg"));
		}
		//System.out.println(result.toString());
		logger.info(result.toString());
		return result.toString();
	}

	@Test
	public void testPush() {//多个短信
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("smsTemplateId", "166710");
		map.put("mobile", "15013245906,15011834279");
		String[] datas = new String[] { " zhengshuihong" };
		map.put("datas", datas);
		String result = push(1, map);
		System.out.println("testresult" + result);
	}

	@Test
	public void testPush1() {//单个短信
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("smsTemplateId", "95200");//短信模版id
		map.put("mobile", "15011834279");//手机号
		String[] datas = new String[] { "023122", "10" };//注入短信模版的参数
		map.put("datas", datas);
		String result = push(1, map);
		System.out.println("testresult" + result);
	}

	@Test
	@Deprecated
	public void testPush2() {//个推（通知）
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> users = new ArrayList<>();
		//		users.add("16282");
		//		users.add("1234");
		//		users.add("16539");
		//		users.add("16300");
		//		users.add("16316");
		//		users.add("16195");
		//		users.add("10163");
		//		users.add("16190");
		users.add("10384");
		users.add("1234");
		map.put("users", users);
		map.put("content", "2017");//传递的内容 根据业务不同 传递的内容也不同
		map.put("title", "标题2017");
		map.put("text", "通知栏内容2017");
		String result = push(2, map);
		System.out.println("testresult" + result);
	}

	@Test
	public void testPush3() {//个推(透传)
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> users = new ArrayList<>();
		users.add("16190");
		users.add("16285");
		users.add("10384");
		users.add("1234");
		users.add("16299");
		users.add("16220");
		map.put("users", users);
		JSONObject obj = new JSONObject();
		obj.put("auditStatus", 1);
		obj.put("subject", "");
		obj.put("data", "您的会籍申请认证已通过");
		obj.put("type", 5);
		map.put("content", obj.toString());//传递的内容 根据业务不同 传递的内容也不同
		String result = push(3, map);
		System.out.println("testresult" + result);
	}

	@Test
	@Deprecated
	public void testPush4() {//短信和个推（通知）
		Map<String, Object> map = new HashMap<String, Object>();
		String[] datas = new String[] { "023122", "10" };
		map.put("smsTemplateId", "95200");
		map.put("mobile", "15011834279");
		map.put("datas", datas);
		List<String> users = new ArrayList<>();
		users.add("1234");
		map.put("users", users);
		map.put("content", "2017");//传递的内容 根据业务不同 传递的内容也不同
		map.put("title", "标题2017");
		map.put("text", "通知栏内容2017");
		String result = push(4, map);
		System.out.println("testresult" + result);
	}

	@Test
	public void testPush5() {//短信和个推(透传)
		Map<String, Object> map = new HashMap<String, Object>();
		String[] datas = new String[] { "023122", "10" };
		map.put("smsTemplateId", "95200");
		map.put("mobile", "15011834279");
		map.put("datas", datas);
		List<String> users = new ArrayList<>();
		users.add("16190");
		users.add("16285");
		users.add("10384");
		users.add("1234");
		users.add("16299");
		users.add("16220");
		map.put("users", users);
		JSONObject obj = new JSONObject();
		obj.put("auditStatus", 1);
		obj.put("subject", "");
		obj.put("data", "您的会籍申请认证已通过");
		obj.put("type", 5);
		map.put("content", obj.toString());//传递的内容 根据业务不同 传递的内容也不同
		String result = push(5, map);
		System.out.println("testresult" + result);
	}

	public static void marryPush(Integer type, String appUserId, String data) {
		Map<String, Object> resultMap = new HashMap<>();
		List<String> users = new ArrayList<>();
		users.add(appUserId);
		resultMap.put("users", users);
		JSONObject obj = new JSONObject();
		obj.put("subject", "");
		obj.put("data", data);
		obj.put("type", type);
		resultMap.put("content", obj.toString());
		PushUtil.push(3, resultMap);
	}
}
