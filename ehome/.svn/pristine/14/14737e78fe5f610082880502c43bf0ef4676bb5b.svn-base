package com.ehome.cloud.app.marry;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.ehome.cloud.app.marry.service.IAppMarryService;
import com.ehome.cloud.marry.dto.MarryMemberForZhuYeDto;
import com.ehome.cloud.marry.model.MarryLoveModel;
import com.ehome.cloud.marry.model.MarryMemberModel;
import com.ehome.cloud.marry.model.MarryPhoto;
import com.ehome.cloud.marry.model.MarryShielding;
import com.ehome.cloud.marry.service.IAppMarryLookService;
import com.ehome.cloud.marry.service.IAppMarryLoveService;
import com.ehome.cloud.marry.service.IAppMarryMemmberService;
import com.ehome.cloud.marry.service.IAppMarryPhotoService;
import com.ehome.cloud.marry.service.IAppMarryThumpUpService;
import com.ehome.cloud.marry.service.IMarryShieldingService;
import com.ehome.cloud.member.model.Member;
import com.ehome.cloud.member.model.MemberHome;
import com.ehome.cloud.member.service.IMemberHomeService;
import com.ehome.cloud.member.service.IMemberService;
import com.ehome.cloud.sys.model.AppUserModel;
import com.ehome.cloud.sys.service.IAppUserService;
import com.ehome.core.dict.ResponseCode;
import com.ehome.core.frame.BaseController;
import com.ehome.core.model.AjaxResult;
import com.ehome.core.util.CollectionUtils;
import com.ehome.core.util.MapUtils;
import com.ehome.push.PushUtil;

/*
 * @Title:AppMarryController
 * @Description:婚恋接口管理
 * @author:zsh
 * @date:2017年4月19日
 * @version 1.0,2017年4月19日
 * @{tags}
 */
@Controller
@RequestMapping(value = "/app/marry")
public class AppMarryController extends BaseController {

    @Resource
    private IAppMarryService appMarryService;

    @Resource
    private IAppMarryPhotoService appMarryPhotoService;

    @Resource
    private IMemberService memberService;

    @Resource
    private IMemberHomeService memberHomeService;

    @Resource
    private IAppMarryLoveService appMarryLoveService;

    @Resource
    private IAppUserService appUserService;

    @Resource
    private IMarryShieldingService marryShieldingService;

    @Resource
    private IAppMarryThumpUpService appMarryThumpUpService;

    @Resource
    private IAppMarryLookService appMarryLookService;

    @Resource
    private IAppMarryMemmberService appMarryMemmberService;

    /**
     *  根据用户id查询婚恋主页信息
      * @param request  appUserId
      * @param response
      * @return
      * @throws Exception 
      *
     */
    @RequestMapping(value = "/queryUserMarryInfoById", method = RequestMethod.POST)
    @ResponseBody
    public AjaxResult queryUserMarryInfoById(HttpServletRequest request, HttpServletResponse response) throws Exception {

        response.setContentType("text/html; charset=utf-8");
        request.setCharacterEncoding("utf-8");

        Map<String, Object> map = new HashMap<>();
        int status = ResponseCode.success.getCode();
        String message = ResponseCode.success.getMsg();

        try {
            map = this.getPageData();

            AppUserModel appUserModel = new AppUserModel();
            appUserModel.setId(MapUtils.getInteger(map, "appUserId", -1));
            appUserModel = appUserService.selectByKey(appUserModel);

            MarryMemberModel marryMemberModel = appMarryService.selectOne(new MarryMemberModel(MapUtils.getInteger(map, "appUserId", -1)));
            MarryPhoto marryPhoto = new MarryPhoto();
            marryPhoto.setAppUserId(MapUtils.getInteger(map, "appUserId", -1));

            List<MarryPhoto> marryPhotoList = appMarryPhotoService.select(marryPhoto);//查询照片
            if (CollectionUtils.isNotEmpty(marryPhotoList)) {
                Collections.sort(marryPhotoList, new Comparator<MarryPhoto>() {
                    @Override
                    public int compare(MarryPhoto o1, MarryPhoto o2) {
                        return o1.getId().compareTo(o2.getId());
                    }
                });
            }

            Member member = new Member();
            member.setAppUserId(MapUtils.getInteger(map, "appUserId", -1));
            member.setAppUserId(MapUtils.getInteger(map, "appUserId", -1));
            member = memberService.selectOne(member);//查询会员id

            MemberHome memberHome = new MemberHome();//家庭情况
            List<MemberHome> memberHomeList = new ArrayList<>();

            if (member != null) {
                memberHome.setMemberId(member.getId());
                memberHomeList = memberHomeService.select(memberHome);
            }

            if (CollectionUtils.isNotEmpty(memberHomeList)) {
                Collections.sort(memberHomeList, new Comparator<MemberHome>() {
                    @Override
                    public int compare(MemberHome o1, MemberHome o2) {
                        return o1.getId().compareTo(o2.getId());
                    }
                });
            }

            List<Map<String, Object>> interetsList = appMarryService.queryInterets(MapUtils.getInteger(map, "appUserId", -1));

            Map<String, Object> memberInfo = appMarryService.queryMemberByAppUserId(MapUtils.getInteger(map, "appUserId", -2));
            if (!(MapUtils.getInteger(map, "loginAppUserId", -1).intValue() == MapUtils.getInteger(map, "appUserId", -2).intValue())) {// 查询别人主页信息
                MarryLoveModel marryLoveModel = new MarryLoveModel();
                marryLoveModel.setAppUserId(MapUtils.getInteger(map, "loginAppUserId", -1));
                marryLoveModel.setLoveAppUserId(MapUtils.getInteger(map, "appUserId", -2));
                marryLoveModel.setStatu(1);
                marryLoveModel = appMarryLoveService.selectOne(marryLoveModel);

                //查询举报和拉黑
                MarryShielding marryShieldingJuBao = new MarryShielding();
                marryShieldingJuBao.setMarryUserId(MapUtils.getInteger(map, "appUserId", -2).intValue());
                marryShieldingJuBao.setCreateUserId(MapUtils.getInteger(map, "loginAppUserId", -1).intValue());
                marryShieldingJuBao.setOperatorType(1);//举报
                marryShieldingJuBao = marryShieldingService.selectOne(marryShieldingJuBao);

                MarryShielding marryShieldingLahei = new MarryShielding();
                marryShieldingLahei.setMarryUserId(MapUtils.getInteger(map, "appUserId", -2).intValue());
                marryShieldingLahei.setCreateUserId(MapUtils.getInteger(map, "loginAppUserId", -1).intValue());
                marryShieldingLahei.setOperatorType(2);//拉黑b       
                marryShieldingLahei = marryShieldingService.selectOne(marryShieldingLahei);

                //更新查看记录
                appMarryLookService.saveOrUpdateLookHistory(
                        MapUtils.getInteger(map, "loginAppUserId", -1).intValue(),
                        MapUtils.getInteger(map, "appUserId", -2).intValue());

                AppUserModel loginAppUserModel = new AppUserModel();
                loginAppUserModel.setId(MapUtils.getInteger(map, "loginAppUserId", -1));
                loginAppUserModel = appUserService.selectByKey(loginAppUserModel);
                if (loginAppUserModel != null) {
                    //推送
                    Map<String, Object> resultMap = new HashMap<String, Object>();
                    List<String> users = new ArrayList<>();
                    users.add(MapUtils.getString(map, "appUserId", ""));
                    resultMap.put("users", users);
                    JSONObject obj = new JSONObject();
                    obj.put("subject", "");
                    obj.put("data", loginAppUserModel.getNickName() + "看过了你");
                    obj.put("type", 13);
                    resultMap.put("content", obj.toString());//传递的内容 根据业务不同 传递的内容也不同
                    PushUtil.push(3, resultMap);
                }

                if (null == marryLoveModel) {
                    map.clear();
                    map.put("is_love", 0);//已喜欢
                } else {
                    map.clear();
                    if (marryLoveModel.getStatu() == 1) {
                        map.put("is_love", 1);//未勾选喜欢
                    }
                }

                if (null == marryShieldingJuBao) {
                    map.put("is_juBao", 1);//已举报
                } else {
                    map.put("is_juBao", 0);//不举报
                }

                if (null == marryShieldingLahei) {
                    map.put("is_laHei", 1);//已拉黑
                } else {
                    map.put("is_laHei", 0);//不拉黑
                }
            } else {
                map.clear();
            }

            MarryMemberForZhuYeDto marryMemberForZhuYeDto = new MarryMemberForZhuYeDto();
            BeanUtils.copyProperties(marryMemberModel, marryMemberForZhuYeDto);
            marryMemberForZhuYeDto.setHeight(appUserModel.getHeight());
            marryMemberForZhuYeDto.setAnnualIncome(appUserModel.getAnnualIncome());
            marryMemberForZhuYeDto.setBirthday(appUserModel.getBirthday());
            if (member != null) {
                marryMemberForZhuYeDto.setEducation(member.getEducation());
            }

            map.put("interests", interetsList);
            map.put("marryMember", marryMemberForZhuYeDto);

            map.put("marryPhotoList", marryPhotoList);
            map.put("memberHomeList", memberHomeList);
            map.put("memberInfo", memberInfo);

        } catch (Exception e) {
            status = ResponseCode.error.getCode();
            message = ResponseCode.error.getMsg();
            e.printStackTrace();
        }
        return new AjaxResult(status, message, map);
    }

    /**
     * 举报或拉黑  或取消
      * @return 
      *
     */
    @RequestMapping(value = "doshielding", method = RequestMethod.POST)
    @ResponseBody
    public AjaxResult Doshielding(@RequestParam int clickType, @RequestParam Integer createUserId, @RequestParam Integer operatorType,
            @RequestParam Integer marryUserId, MarryShielding marryShielding) {

        if (createUserId.intValue() != marryUserId.intValue()) {
            MarryShielding marryShieldingTemp = marryShieldingService.selectOne(marryShielding);
            if (clickType == 0) {//举报或拉黑
                marryShielding.setOperatorTime(new Date());
                if (null == marryShieldingTemp) {
                    marryShieldingService.save(marryShielding);
                    //若是举报
                    if(operatorType.intValue()==1){
                        MarryMemberModel marryMemberModel = new MarryMemberModel();
                        marryMemberModel.setAppUserId(marryUserId);
                        marryMemberModel = appMarryMemmberService.selectOne(marryMemberModel);
                        Integer reportNum = marryMemberModel.getReportNum() == null ? 0 : marryMemberModel.getReportNum();
                        reportNum++;
                        marryMemberModel.setReportNum(reportNum);
                        //举报超过10次设为系统黑名单
                        if(reportNum>=10){
                            marryMemberModel.setIsBackList(1);
                        }
                        appMarryMemmberService.updateNotNull(marryMemberModel);
                    }
                    /*MarryShielding queryMarryShielding = new MarryShielding();
                    queryMarryShielding.setMarryUserId(marryShielding.getMarryUserId());
                    List<MarryShielding> list = marryShieldingService.select(queryMarryShielding);
                    MarryMemberModel marryMemberModel = new MarryMemberModel();
                    marryMemberModel.setAppUserId(marryShielding.getMarryUserId());
                    marryMemberModel.setIsBackList(7);
                    if (CollectionUtils.isNotEmpty(list) && list.size() > 9) appMarryMemmberService.updateNotNull(marryMemberModel);*/
                    

                } else {
                    marryShielding = marryShieldingTemp;
                }
                return new AjaxResult(ResponseCode.success.getCode(), ResponseCode.success.getMsg(), marryShielding);
            } else {// 取消拉黑
                if (marryShieldingTemp != null) marryShieldingService.deleteByKey(marryShieldingTemp.getId());
                return new AjaxResult(ResponseCode.success.getCode(), ResponseCode.success.getMsg(), marryShieldingTemp);
            }
        } else {
            return new AjaxResult(ResponseCode.error.getCode(), ResponseCode.error.getMsg(), null);
        }

    }

    /**
     * 点赞我的、回复我的、喜欢我的
      * @param request
      * @param response
      * @return 
      *
     */
    @RequestMapping(value = "getAboutMe")
    @ResponseBody
    public AjaxResult getAboutMe(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> map = new HashMap<>();
        map = this.getPageData();
        Map<String, List<Map<String, Object>>> resultmap = new HashMap<>();
        List<Map<String, Object>> marryThumpUpModels = new ArrayList<>();
        List<Map<String, Object>> marryLoves = new ArrayList<>();
        List<Map<String, Object>> marryReplys = new ArrayList<>();
        List<Map<String, Object>> marryLooks = new ArrayList<>();
        if (map.get("type") != null && !"".equals(map.get("type").toString())) {
            int type = Integer.parseInt(map.get("type").toString());
            switch (type) {
            case 1://点赞
                marryThumpUpModels = appMarryService.queryThumpByAppUserId(map);
                resultmap.put("marryThumpUpModels", marryThumpUpModels);//点赞我的照片
                break;
            case 2://喜欢我
                marryLoves = appMarryService.querytMarryLoveByAppUserId(map);
                resultmap.put("marryLoves", marryLoves);//喜欢我的人
                break;
            case 3://回复我
                marryReplys = appMarryService.querytMarryReplysByAppUserId(map);
                resultmap.put("marryCommentReplys", marryReplys);//评论或回复我的人
                break;
            case 4://看过我
                marryLooks = appMarryService.querytMarryLooksByAppUserId(map);
                resultmap.put("marryLooks", marryLooks);//看过我的人
                break;
            default:
                break;
            }
        } else {
            marryThumpUpModels = appMarryService.queryThumpByAppUserId(map);
            marryLoves = appMarryService.querytMarryLoveByAppUserId(map);
            marryReplys = appMarryService.querytMarryReplysByAppUserId(map);
            marryLooks = appMarryService.querytMarryLooksByAppUserId(map);
            resultmap.put("marryThumpUpModels", marryThumpUpModels);//点赞我的照片
            resultmap.put("marryLoves", marryLoves);//喜欢我的人
            resultmap.put("marryCommentReplys", marryReplys);//回复我的人
            resultmap.put("marryLooks", marryLooks);//看过我的人
        }

        return new AjaxResult(ResponseCode.success.getCode(), ResponseCode.success.getMsg(), resultmap);
    }

}
